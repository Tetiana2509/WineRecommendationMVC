// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WineRecommendationMVC.Data;

#nullable disable

namespace WineRecommendationMVC.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250327180411_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WineRecommendationMVC.Models.WinePrediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("PredictedQuality")
                        .HasColumnType("real");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WineSampleId")
                        .HasColumnType("int");

                    b.Property<string>("WineType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("WineSampleId")
                        .IsUnique();

                    b.ToTable("WinePredictions");
                });

            modelBuilder.Entity("WineRecommendationMVC.Models.WineSample", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Alcohol")
                        .HasColumnType("real");

                    b.Property<float>("Chlorides")
                        .HasColumnType("real");

                    b.Property<float>("CitricAcid")
                        .HasColumnType("real");

                    b.Property<float>("Density")
                        .HasColumnType("real");

                    b.Property<float>("FixedAcidity")
                        .HasColumnType("real");

                    b.Property<float>("FreeSulfurDioxide")
                        .HasColumnType("real");

                    b.Property<float>("PH")
                        .HasColumnType("real");

                    b.Property<float>("ResidualSugar")
                        .HasColumnType("real");

                    b.Property<float>("Sulphates")
                        .HasColumnType("real");

                    b.Property<float>("TotalSulfurDioxide")
                        .HasColumnType("real");

                    b.Property<float>("VolatileAcidity")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("WineSamples");
                });

            modelBuilder.Entity("WineRecommendationMVC.Models.WinePrediction", b =>
                {
                    b.HasOne("WineRecommendationMVC.Models.WineSample", "WineSample")
                        .WithOne("WinePrediction")
                        .HasForeignKey("WineRecommendationMVC.Models.WinePrediction", "WineSampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WineSample");
                });

            modelBuilder.Entity("WineRecommendationMVC.Models.WineSample", b =>
                {
                    b.Navigation("WinePrediction");
                });
#pragma warning restore 612, 618
        }
    }
}
